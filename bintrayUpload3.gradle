/**
 * 以下开始是将Android Library上传到JCenter仓库的相关配置（使用novoda插件）
 *
 * author : jeterlee
 * website : https://github.com/jeterlee/android-dev-note/blob/master/document/chapter7/or-project-publish.md
 * desc : 注意在project的build中编码配置，否则会“编码GBK不可映射字符”
 */

apply plugin: 'com.novoda.bintray-release'

// local properties（隐私内容，此文件不会上传）
Properties properties = new Properties()
File localPropertiesFile = project.file("local.properties");
if (localPropertiesFile.exists()) {
    properties.load(localPropertiesFile.newDataInputStream())
}

// project properties（发布版本的一些信息，每个Android Library都需要配置）
File projectPropertiesFile = project.file("project.properties");
if (projectPropertiesFile.exists()) {
    properties.load(projectPropertiesFile.newDataInputStream())
}

// read properties
def user = properties.getProperty("bintray.user")
def apiKey = properties.getProperty("bintray.apiKey")
def unpublished = properties.getProperty("bintray.unpublished")

def projectBintrayRepo = properties.getProperty("project.bintrayRepo")
def projectGroupId = properties.getProperty("project.groupId")
def projectArtifactId = properties.getProperty("project.artifactId")
def projectVersionName = android.defaultConfig.versionName
def projectDesc = properties.getProperty("project.desc")
def projectWebSite = properties.getProperty("project.webSite")

def javadocName = properties.getProperty("javadoc.name")

/**
 * 以下为配置library注释在打包jar后保留（处理了依赖Android官方库javadoc）
 */

if (project.hasProperty("android")) {
    /**
     * Android libraries
     */

    // This generates sources.jar（打包源码jar，生成源文件）
    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }
    
    // 处理Android官方库注释（特殊处理）
    android.libraryVariants.all { variant ->
        println variant.javaCompile.classpath.files
        if (variant.name == 'release') {
            // 只需release的javadoc
            task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
                // title = ''
                // description = ''
                source = variant.javaCompile.source
                classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
                options {
                    encoding "utf-8"
                    links "http://docs.oracle.com/javase/7/docs/api/"
                    linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
                }
                exclude '**/BuildConfig.java'
                exclude '**/R.java'
            }
            // This generates configuration javadoc（生成javadoc文档）
            task("javadoc${variant.name.capitalize()}Jar", type: Jar,
                    dependsOn: "generate${variant.name.capitalize()}Javadoc") {
                classifier = 'javadoc'
                from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
            }
//            // This generates configuration javadoc（生成javadoc文档）
//            task javadoc(type: Javadoc) {
//                source = android.sourceSets.main.java.srcDirs
//                classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//                failOnError false
//            }
            // 上传到JCenter所需要的源码文件
            artifacts {
                archives tasks.getByName("javadoc${variant.name.capitalize()}Jar")
                archives sourcesJar
            }
        }
    }
} else {
    /**
     * Java libraries
     */

    // This generates sources.jar（打包源码jar，生成源文件）
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    // This generates javadoc.jar（打包文档jar，生成文档文件）
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    // This is javadoc configuration（配置javadoc）
    /*javadoc {
        options {
            encoding "UTF-8"
            charSet 'UTF-8'
            author true
            version projectVersionName
            links "http://docs.oracle.com/javase/7/docs/api"
            title javadocName
        }
    }*/

    // 上传到JCenter所需要的源码文件
    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}

// This copy javadoc（拷贝javadoc文件）
//task copyDoc(type: Copy) {
//    from "${buildDir}/docs/"
//    into "docs"
//}

/**
 * bintray configuration (use novoda)
 *
 *      // gradle-4.2.1 / 0.7.0 , 0.8.0
 *      // gradle-4.1 / gradle 3.0.0 / 0.6.1
 * - 1、classpath 'com.novoda:bintray-release:0.6.1'
 * - 2、apply plugin: 'com.novoda.bintray-release'// 上传JCenter仓库
 *
 * 使用 publish 闭包来设置你的应用的信息（上传JCenter仓库）
 *
 * 使用命令：
 * 1、gradlew clean build bintrayUpload
 * 2、gradlew clean build bintrayUpload -PbintrayUser={bintrayUser} -PbintrayKey={bintrayApi} -PdryRun=false
 * 3、gradlew clean build bintrayUpload -PbintrayUser={bintrayUser} -PbintrayKey={bintrayApi} -PdryRun=false -x releaseAndroidJavadocs
 */
publish {
    userOrg = user// 用于上传的组织名称（也就是bintray用户名）
    bintrayUser = user// 用于上传的用户名
    bintrayKey = apiKey// 用户账户的bintray API密钥
    dryRun = unpublished// 若设置为“true”，则运行所有内容，但不会将包上传到bintray。设为“false”，则正常上传。
    repoName = projectBintrayRepo// 代码仓库名称（默认设置为“maven”）
    groupId = projectGroupId// 用于上传的group id（就是library module的package）
    artifactId = projectArtifactId// bintray创建的package
    publishVersion = projectVersionName// 版本号（不能以“-SNAPSHOT”结尾）
    desc = projectDesc// 在bintray中项目的简短描述
    website = projectWebSite// 一个与该项目网址相关的URL字符串（一般为Github仓库）
}
